There are two lists, possibly of different lengths. The first one consists of keys, the second one consists of values.
Write a Program that Prints a dictionary created from keys and values. 
If there are not enough values, the rest of keys should have a None (JS null)value. If there not enough keys, just ignore the rest of values.

Example 1:

keys = ['a', 'b', 'c', 'd']
values = [1, 2, 3]
Output:{'a': 1, 'b': 2, 'c': 3, 'd': None}

Example 2:

keys = ['a', 'b', 'c']
values = [1, 2, 3, 4]
Output:{'a': 1, 'b': 2, 'c': 3}

Testcase-1:
input:4
a
b
c
d
5
1
2
3
4
5
Output:
['a', 'b', 'c', 'd']
[1, 2, 3, 4, 5]
{'a': 1, 'b': 2, 'c': 3, 'd': 4}

Testcase-2:
Input:4
a
h
d
r
6
12
34
56
78
675
34
Output:['a', 'h', 'd', 'r']
[12, 34, 56, 78, 675, 34]
{'a': 12, 'h': 34, 'd': 56, 'r': 78}

Testcase-3:
input:4
a
c
b
g
2
3
6
Output:['a', 'c', 'b', 'g']
[3, 6]
{'a': 3, 'c': 6, 'b': None, 'g': None}

Testcase-4:
input:4
a
v
f
t
2
5
7
Output:['a', 'v', 'f', 't']
[5, 7]
{'a': 5, 'v': 7, 'f': None, 't': None}


Time Complexity:

In DictionaryFromTwoLists.py

The first two approaches have a time complexity of O(n).
The third and fourth approaches have a time complexity of O(min(n, m)).